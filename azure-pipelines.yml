trigger:
  branches:
    include:
    - master

variables:
  dotnetCoreVersion: '2.2.105'
  testProjects: 'scripts/test/**/*.csproj'

jobs:
- job: Test
  strategy:
    matrix:
      Ubuntu:
        vmImage: 'ubuntu-16.04'
        runningOSName: 'Ubuntu'
      Windows:
        vmImage: 'windows-2019'
        runningOSName: 'Windows'
  steps:
  - task: DotNetCoreInstaller@0
    displayName: 'Install .Net Core SDK'
    inputs:
      version: $(dotnetCoreVersion)
  - task: DotNetCoreCLI@1
    displayName: 'Restore projects'
    inputs:
      command: restore
      projects: $(testProjects)
  - task: DotNetCoreCLI@1
    displayName: 'Run xUnit tests'
    inputs:
      command: test
      projects: $(testProjects)
      arguments: '--logger trx'
  - task: PublishTestResults@2
    condition: succeededOrFailed()
    displayName: 'Publish the test results'
    inputs:
      testRunner: VSTest
      testResultsFiles: '**/*.trx'
- job: Build
  strategy:
    matrix:
      Ubuntu:
        vmImage: 'ubuntu-16.04'
        runningOSName: 'Ubuntu'
      Windows:
        vmImage: 'windows-2019'
        runningOSName: 'Windows'
  steps:
  - task: DotNetCoreInstaller@0
    displayName: 'Install .Net Core SDK'
    inputs:
      version: $(dotnetCoreVersion)
  - task: DotNetCoreCLI@1
    displayName:  'Restore projects'
    inputs:
      command: restore
      projects: '**/*.csproj'
  - script: |
      dotnet tt CommandFinder.tt
    displayName: 'Build T4 file'
    workingDirectory: '$(Build.SourcesDirectory)/scripts/plpmcui'
  - task: DotNetCoreCLI@1
    displayName: 'Build all'
    inputs:
      command: publish
      projects: '$(Build.SourcesDirectory)/scripts/plpmcui/plpmcui.csproj'
      arguments: '--configuration Release --output $(Build.ArtifactStagingDirectory)'
      publishWebProjects: False
  - task: PublishBuildArtifacts@1
    displayName: 'Publish build items'
    inputs:
      ArtifactName: 'BuildOutputTo$(runningOSName)'
  